Index: art/backend/flaskconnection.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request\r\nimport main\r\n\r\napp = Flask(__name__, template_folder=\"templates\")\r\ndata = \"databaseCsv\"\r\ndata2 = \"databaseCsv2\"\r\nldata = \"legacyDatabases\"\r\nldata2 = \"legacyDatabases2\"\r\ntime = 100000\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    main.dbstore(data, ldata)\r\n    main.dbstore(data2,ldata2)\r\n    main.zipit(ldata, \"Csvs\")\r\n    main.zipit(ldata2, \"Csvs\")\r\n    main.zipit(\"Csvs\", \"static\")\r\n    return render_template(\"FrontEnd/LoginPage.html\")\r\n\r\n@app.route(\"/Main/\", methods=['GET', 'POST'])\r\ndef mainpage():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata, time)\r\n    main.collective(ldata, time, \"white\")\r\n    if (main.average(main.prodcalcoverall(ldata, time))) < 85:\r\n        g = \"red\"\r\n    else:\r\n        g = \"green\"\r\n    if main.average(main.dtcalcoverall(ldata, time))/6 > 10:\r\n        b = \"red\"\r\n    else:\r\n        b = \"green\"\r\n    return render_template(\"FrontEnd/f1/Mainpage.html\",\r\n                           ppm=round(main.average(main.ftfcalcoverall(ldata, time)), 2),\r\n                           pro=round(main.average(main.prodcalcoverall(ldata, time)), 2),\r\n                           dt=round(main.average(main.dtcalcoverall(ldata, time)) / 6),\r\n                           w=round(main.average(main.ppcalcoverall(ldata, time))),\r\n                           z=round(main.average(main.dtcalcoverall(ldata, time))),\r\n                           f=\"Floor 1\",\r\n                           pcolor=g,\r\n                           dtcolor=b,\r\n                           )\r\n\r\n@app.route(\"/ppm/\", methods=['GET', 'POST'])\r\ndef ppm():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata, time)\r\n    main.ftfgraph(ldata, time, \"white\")\r\n    return render_template(\"FrontEnd/f1/ppm.html\")\r\n\r\n@app.route(\"/pro/\", methods=['GET', 'POST'])\r\ndef pro():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata, time)\r\n    main.prodgraph(ldata, time, \"white\")\r\n    return render_template(\"FrontEnd/f1/pro.html\")\r\n\r\n@app.route(\"/dt/\", methods=['GET', 'POST'])\r\ndef downtime():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata, time)\r\n    main.dtgraph(ldata, time, \"white\")\r\n    return render_template(\"FrontEnd/f1/downtime.html\")\r\n\r\n@app.route(\"/Main2/\", methods=['GET', 'POST'])\r\ndef mainpage2():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata2, time)\r\n    main.collective(ldata2, time, \"white\")\r\n    if (main.average(main.prodcalcoverall(ldata2, time))) < 85:\r\n        g = \"red\"\r\n    else:\r\n        g = \"green\"\r\n    if main.average(main.dtcalcoverall(ldata2, time)) / 6 > 10:\r\n        b = \"red\"\r\n    else:\r\n        b = \"green\"\r\n    return render_template(\"FrontEnd/f2/Mainpagef2.html\",\r\n                           ppm=round(main.average(main.ftfcalcoverall(ldata2, time)), 2),\r\n                           pro=round(main.average(main.prodcalcoverall(ldata2, time)), 2),\r\n                           dt=round(main.average(main.dtcalcoverall(ldata2, time)) / 6),\r\n                           w=round(main.average(main.ppcalcoverall(ldata2, time))),\r\n                           z=round(main.average(main.dtcalcoverall(ldata2, time))),\r\n                           f=\"Floor 1\",\r\n                           pcolor=g,\r\n                           dtcolor=b,\r\n                           )\r\n\r\n@app.route(\"/ppm2/\", methods=['GET', 'POST'])\r\ndef ppm2():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata2, time)\r\n    main.ftfgraph(ldata2, time, \"white\")\r\n    return render_template(\"FrontEnd/f2/ppm2.html\")\r\n\r\n@app.route(\"/pro2/\", methods=['GET', 'POST'])\r\ndef pro2():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata2, time)\r\n    main.prodgraph(ldata2, time, \"white\")\r\n    return render_template(\"FrontEnd/f2/pro2.html\")\r\n\r\n@app.route(\"/dt2/\", methods=['GET', 'POST'])\r\ndef downtime2():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata2, time)\r\n    main.dtgraph(ldata2, time, \"white\")\r\n    return render_template(\"FrontEnd/f2/downtime2.html\")\r\n\r\n@app.route(\"/Main3/\", methods=['GET', 'POST'])\r\ndef mainpage3():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfita([ldata, ldata2], time)\r\n    main.collectivear([ldata, ldata2], time, \"white\")\r\n    if main.average(main.prodcalcall([ldata, ldata2], time)) < 85:\r\n        g = \"red\"\r\n    else:\r\n        g = \"green\"\r\n    if main.average(main.dtcalcall([ldata, ldata2], time)) / 6 > 10:\r\n        b = \"red\"\r\n    else:\r\n        b = \"green\"\r\n    return render_template(\"FrontEnd/f3/Mainpagef2.html\",\r\n                           ppm=round(main.average(main.ftfcalcall([ldata, ldata2], time)), 2),\r\n                           pro=round(main.average(main.prodcalcall([ldata, ldata2], time)), 2),\r\n                           dt=round(main.average(main.dtcalcall([ldata, ldata2], time)) / 6),\r\n                           w=round(main.average(main.ppcalcall([ldata, ldata2], time))),\r\n                           z=round(main.average(main.dtcalcall([ldata, ldata2], time))),\r\n                           f=\"Floor 1\",\r\n                           pcolor=g,\r\n                           dtcolor=b,\r\n                           )\r\n\r\n@app.route(\"/ppm3/\", methods=['GET', 'POST'])\r\ndef ppm3():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfita([ldata, ldata2], time)\r\n    main.ftfgraphar([ldata, ldata2], time, \"white\")\r\n    return render_template(\"FrontEnd/f3/ppm2.html\")\r\n\r\n@app.route(\"/pro3/\", methods=['GET', 'POST'])\r\ndef pro3():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfita([ldata, ldata2], time)\r\n    main.prodgraphar([ldata, ldata2], time, \"white\")\r\n    return render_template(\"FrontEnd/f3/pro2.html\")\r\n\r\n@app.route(\"/dt3/\", methods=['GET', 'POST'])\r\ndef downtime3():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfita([ldata, ldata2], time)\r\n    main.dtgraphar([ldata, ldata2], time, \"white\")\r\n    return render_template(\"FrontEnd/f3/downtime2.html\")\r\n\r\n@app.route(\"/f1/\", methods=['GET', 'POST'])\r\ndef f1():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata, time)\r\n    main.collective(ldata, time, \"white\")\r\n    if (main.average(main.prodcalcoverall(ldata, time))) < 85:\r\n        g = \"red\"\r\n    else:\r\n        g = \"green\"\r\n    if main.average(main.dtcalcoverall(ldata, time)) / 6 > 10:\r\n        b = \"red\"\r\n    else:\r\n        b = \"green\"\r\n    return render_template(\"FrontEnd/f1/Mainpage.html\",\r\n                           ppm=round(main.average(main.ftfcalcoverall(ldata, time)), 2),\r\n                           pro=round(main.average(main.prodcalcoverall(ldata, time)), 2),\r\n                           dt=round(main.average(main.dtcalcoverall(ldata, time)) / 6),\r\n                           w=round(main.average(main.ppcalcoverall(ldata, time))),\r\n                           z=round(main.average(main.dtcalcoverall(ldata, time))),\r\n                           f=\"Floor 1\",\r\n                           pcolor=g,\r\n                           dtcolor=b,\r\n                           )\r\n\r\n@app.route(\"/f2/\", methods=['GET', 'POST'])\r\ndef f2():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfit(ldata, time)\r\n    main.collective(ldata2, time, \"white\")\r\n    if (main.average(main.prodcalcoverall(ldata2, time))) < 85:\r\n        g = \"red\"\r\n    else:\r\n        g = \"green\"\r\n    if main.average(main.dtcalcoverall(ldata2, time)) / 6 > 10:\r\n        b = \"red\"\r\n    else:\r\n        b = \"green\"\r\n    return render_template(\"FrontEnd/f2/Mainpagef2.html\",\r\n                           ppm=round(main.average(main.ftfcalcoverall(ldata2, time)), 2),\r\n                           pro=round(main.average(main.prodcalcoverall(ldata2, time)), 2),\r\n                           dt=round(main.average(main.dtcalcoverall(ldata2, time)) / 6),\r\n                           w=round(main.average(main.ppcalcoverall(ldata2, time))),\r\n                           z=round(main.average(main.dtcalcoverall(ldata2, time))),\r\n                           f=\"Floor 1\",\r\n                           pcolor=g,\r\n                           dtcolor=b,\r\n                           )\r\n\r\n@app.route(\"/f3/\", methods=['GET', 'POST'])\r\ndef f3():\r\n    global time\r\n    if request.method == \"POST\":\r\n        time = int(request.form.get(\"num\"))\r\n    main.pdfita([ldata, ldata2], time)\r\n    main.collectivear([ldata, ldata2], time, \"white\")\r\n    if main.average(main.prodcalcall([ldata, ldata2], time)) < 85:\r\n        g = \"red\"\r\n    else:\r\n        g = \"green\"\r\n    if main.average(main.dtcalcall([ldata, ldata2], time))/6 > 10:\r\n        b = \"red\"\r\n    else:\r\n        b = \"green\"\r\n    return render_template(\"FrontEnd/f3/Mainpagef2.html\",\r\n                           ppm=round(main.average(main.ftfcalcall([ldata, ldata2], time)), 2),\r\n                           pro=round(main.average(main.prodcalcall([ldata, ldata2], time)), 2),\r\n                           dt=round(main.average(main.dtcalcall([ldata, ldata2], time)) / 6),\r\n                           w=round(main.average(main.ppcalcall([ldata, ldata2], time))),\r\n                           z=round(main.average(main.dtcalcall([ldata, ldata2], time))),\r\n                           f=\"All Floors\",\r\n                           pcolor=g,\r\n                           dtcolor=b,\r\n                           )\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/art/backend/flaskconnection.py b/art/backend/flaskconnection.py
--- a/art/backend/flaskconnection.py	(revision da8209895a2b1c9bbbddaba4961db74b793f21d4)
+++ b/art/backend/flaskconnection.py	(date 1670274544209)
@@ -255,4 +255,4 @@
                            )
 
 if __name__ == "__main__":
-    app.run()
+    app.run(host='0.0.0.0')
Index: art/backend/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport shutil as sh\r\nimport datetime\r\nimport plotly.graph_objects as go\r\nfrom fpdf import FPDF\r\nfrom plotly.subplots import make_subplots\r\nimport kaleido \r\nprint(kaleido.__version__)\r\n\r\n# arrays arrays for days\r\n\r\ndef dbstore(folder, legacyfolder):\r\n    legacydata = os.listdir(legacyfolder)\r\n    currentfile = \"databaseCsv_\" + str(datetime.date.today())\r\n    if currentfile in legacydata:\r\n        sh.copy2(folder + \"/pmdci_passed_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_failed_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_downtime_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_retested_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_settings_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_employee_data.csv\", legacyfolder + \"/\" + currentfile)\r\n    else:\r\n        os.mkdir(os.path.join(legacyfolder, currentfile))\r\n        sh.copy2(folder + \"/pmdci_passed_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_failed_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_downtime_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_retested_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_settings_data.csv\", legacyfolder + \"/\" + currentfile)\r\n        sh.copy2(folder + \"/pmdci_employee_data.csv\", legacyfolder + \"/\" + currentfile)\r\n    print(\"Today's data has been backed up\")\r\n\r\ndef zipit(folder, loc):\r\n    if folder+\".zip\" in os.listdir(loc):\r\n        os.remove(loc+\"/\"+folder+\".zip\")\r\n        sh.make_archive(loc+\"/\"+folder, 'zip', folder)\r\n    else:\r\n        sh.make_archive(loc+\"/\"+folder, 'zip', folder)\r\n    print(\"file zipped\")\r\n\r\ndef grabdays(legacyfolder, timespan):\r\n    days=[]\r\n    x = 0\r\n    if timespan < os.listdir(legacyfolder).__len__():\r\n        while x < timespan:\r\n            days.append((legacyfolder + \"/\" \"databaseCsv_\" + str(datetime.date.today() - datetime.timedelta(days=x))))\r\n            x = x + 1\r\n    else:\r\n        while x < os.listdir(legacyfolder).__len__():\r\n            days.append((legacyfolder + \"/\" \"databaseCsv_\" + str(datetime.date.today() - datetime.timedelta(days=x))))\r\n            x = x + 1\r\n    return days\r\n\r\n# Combines relevant data and creates a list Matrices\r\ndef mat(folder):\r\n    TheL = []\r\n    x = 0\r\n    D = os.listdir(folder)\r\n    while x < D.__len__():\r\n        TheL.append(ar(open(folder+\"/\" + str(D[x])).readlines()))\r\n        x = x + 1\r\n    return TheL\r\n\r\n# Creates Matrices\r\ndef ar(file):\r\n    PPMArray = []\r\n    x = 0\r\n    i = 0\r\n    pm = []\r\n    while x < file.__len__():\r\n        pm.append(file[x])\r\n        x = x + 1\r\n    while i < file.__len__():\r\n        PPMArray.append(pm[i].split(','))\r\n        i = i + 1\r\n    return PPMArray\r\n\r\n# Removes specific section\r\ndef column(matrix, col):\r\n    ob = []\r\n    x = 0\r\n    while x < matrix.__len__():\r\n        ob.append(matrix[x][col])\r\n        x = x + 1\r\n    return ob\r\n\r\ndef average(array):\r\n    x = 0\r\n    i = 0\r\n    while x < array.__len__():\r\n        i = i + array[x]\r\n        x = x + 1\r\n    i = i/array.__len__()\r\n    return i\r\n\r\ndef combine(array1, array2):\r\n    final = []\r\n    x = 0\r\n    if array1.__len__() < array2.__len__():\r\n        while x < array1.__len__():\r\n            final.append((array1[x] + array2[x]))\r\n            x = x + 1\r\n        while x < array2.__len__():\r\n            final.append((array2[x]))\r\n            x = x + 1\r\n    elif array1.__len__() > array2.__len__():\r\n        while x < array2.__len__():\r\n            final.append((array1[x] + array2[x]))\r\n            x = x + 1\r\n        while x < array1.__len__():\r\n            final.append((array1[x]))\r\n            x = x + 1\r\n    else:\r\n        while x < array1.__len__():\r\n            final.append((array1[x] + array2[x]))\r\n            x = x + 1\r\n    return final\r\n\r\ndef combineav(array1, array2):\r\n    final = []\r\n    x = 0\r\n    if array1.__len__() < array2.__len__():\r\n        while x < array1.__len__():\r\n            final.append(((average([array1[x], array2[x]]))))\r\n            x = x + 1\r\n        while x < array2.__len__():\r\n            final.append((array2[x]))\r\n            x = x + 1\r\n    elif array1.__len__() > array2.__len__():\r\n        while x < array2.__len__():\r\n            final.append(((average([array1[x], array2[x]]))))\r\n            x = x + 1\r\n        while x < array1.__len__():\r\n            final.append((array1[x]))\r\n            x = x + 1\r\n    else:\r\n        while x < array1.__len__():\r\n            final.append((round(average([array1[x], array2[x]]))))\r\n            x = x + 1\r\n    return final\r\n\r\ndef add(array):\r\n    x = 0\r\n    y = 0\r\n    while x < array.__len__():\r\n        y = y + array[x]\r\n        x = x + 1\r\n    return y\r\n\r\n# Compares values\r\ndef compare(string, matrix):\r\n    x = 0\r\n    while x < matrix.__len__():\r\n        if string == matrix[x]:\r\n            return True\r\n        else:\r\n            x = x + 1\r\n\r\n# Places an array matrices into categories, that are then organized by a positional condition\r\ndef sift(folder, position):\r\n    data = mat(folder)[position]\r\n    mach = [*set(column(data, (data[0].__len__()-3)))]\r\n    mach.sort()\r\n    final =[]\r\n    x = 0\r\n    while x < mach.__len__():\r\n        final.append([])\r\n        x = x + 1\r\n    y = 0\r\n    while data.__len__() != 0:\r\n        while y < mach.__len__():\r\n            z = 0\r\n            while z < data.__len__():\r\n                if data[z][data[0].__len__()-3] == mach[y]:\r\n                    final[y].append(data[z])\r\n                    data.remove(data[z])\r\n                else:\r\n                    z = z + 1\r\n            y = y + 1\r\n    i = 0\r\n    while i < final.__len__():\r\n        x = 0\r\n        if final[i][x][0] == \"\":\r\n            final.remove(final[i])\r\n        i = i + 1\r\n    return final\r\n\r\n# Orders values\r\ndef org(ar, row, check):\r\n    base = []\r\n    x = 0\r\n    while x < ar.__len__():\r\n        if(ar[x][row] == check):\r\n            base.append(ar[x])\r\n        x = x + 1\r\n    return base\r\n\r\n# Combines line values\r\ndef consolidate(folder, position, extractval):\r\n    temp = []\r\n    final = []\r\n    data = sift(folder, position)\r\n    x = 0\r\n    while x < data.__len__():\r\n        temp.append(column(data[x], extractval))\r\n        x = x + 1\r\n    y = 0\r\n    while y < temp.__len__():\r\n        temp2 = []\r\n        z = 0\r\n        a = 0\r\n        while z < temp[y].__len__():\r\n            a = a + int(temp[y][z])\r\n            temp2.append(a)\r\n            z = z + 1\r\n        final.append(temp2[temp2.__len__()-1])\r\n        y = y + 1\r\n    return final\r\n\r\ndef lowestarr(folderar):\r\n    x = 0\r\n    fold = folderar[0]\r\n    while x < folderar.__len__():\r\n        if fold.__len__() > folderar[x].__len__():\r\n            fold = folderar[x]\r\n        else:\r\n            fold = fold\r\n        x = x + 1\r\n    return fold\r\n\r\n# Calculate\r\ndef passthresholds(folder):\r\n    x = 2\r\n    final = []\r\n    if os.path.exists(folder):\r\n        while x < 12:\r\n            final.append(add(consolidate(folder, 5, x)))\r\n            x = x + 1\r\n    else:\r\n        final.append(0)\r\n    return final\r\n\r\ndef failthresholds(folder):\r\n    x = 13\r\n    final = []\r\n    if os.path.exists(folder):\r\n        while x < 23:\r\n            final.append(add(consolidate(folder, 5, x)))\r\n            x = x + 1\r\n    else:\r\n        final.append(0)\r\n    return final\r\n\r\ndef ftfcalc(folder):\r\n    results = []\r\n    x = 0\r\n    if os.path.exists(folder):\r\n        f = consolidate(folder, 2, 1)\r\n        while x < f.__len__():\r\n            results.append(f[x])\r\n            x = x + 1\r\n    else:\r\n        results.append(0)\r\n    return results\r\n\r\ndef ppcalc(folder):\r\n    if os.path.exists(folder):\r\n        p = consolidate(folder, 3, 1)\r\n        r = consolidate(folder, 4, 1)\r\n        results = combine(p, r)\r\n    else:\r\n        results = [0]\r\n    return results\r\n\r\ndef prodcalc(folder):\r\n    x = 0\r\n    values = []\r\n    if os.path.exists(folder):\r\n        te = passthresholds(folder)\r\n        workhours = 10\r\n        pdata = consolidate(folder, 3, 1)\r\n        op = (workhours-.25) * pdata.__len__()\r\n        while x < pdata.__len__():\r\n            tes = te[x]/1000*60\r\n            st = (tes*pdata[x])/(3600)\r\n            p = st/op\r\n            values.append(p * 100)\r\n            x = x + 1\r\n    else:\r\n        values.append(0)\r\n    return values\r\n\r\ndef dtcalc(folder):\r\n    if os.path.exists(folder):\r\n        dt = consolidate(folder, 0, 1)\r\n        et = consolidate(folder, 0, 2)\r\n        results = combine(dt, et)\r\n    else: results = [0]\r\n    return results\r\n\r\ndef pt(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        final.append(add(passthresholds(fol[x])))\r\n        x = x + 1\r\n    return final\r\n\r\ndef ft(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        final.append(add(failthresholds(fol[x])))\r\n        x = x + 1\r\n    return final\r\n\r\ndef ptall(folderar, timespan):\r\n    fol = grabdays(folderar[0], timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        final.append(add(passthresholds(fol[x])))\r\n        x = x + 1\r\n    return final\r\n\r\ndef ftall(folderar, timespan):\r\n    fol = grabdays(folderar[0], timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        final.append(add(failthresholds(fol[x])))\r\n        x = x + 1\r\n    return final\r\n\r\ndef ftfcalcoverall(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    f = os.listdir(legacyfolder)\r\n    while x < fol.__len__():\r\n            final.append(add(ftfcalc(fol[x])))\r\n            x = x + 1\r\n    return final\r\n\r\ndef ppcalcoverall(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        final.append(add(ppcalc(fol[x])))\r\n        x = x + 1\r\n    return final\r\n\r\ndef prodcalcoverall(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        final.append(add(prodcalc(fol[x])))\r\n        x = x + 1\r\n    return final\r\n\r\ndef dtcalcoverall(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        if os.path.exists(fol[x]):\r\n            final.append(average(consolidate(fol[x], 0, 1)))\r\n        else:\r\n            final.append(0)\r\n        x = x + 1\r\n    return final\r\n\r\ndef escalcoverall(legacyfolder, timespan):\r\n    fol = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    final = []\r\n    while x < fol.__len__():\r\n        if os.path.exists(fol[x]):\r\n            final.append(average(consolidate(fol[x], 0, 2)))\r\n        else:\r\n            final.append(0)\r\n        x = x + 1\r\n    return final\r\n\r\ndef ftfcalcall(folderar, time):\r\n    x = 0\r\n    collection = []\r\n    final = []\r\n    while x < folderar.__len__():\r\n        collection.append(ftfcalcoverall(folderar[x], time))\r\n        x = x + 1\r\n    y = 0\r\n    while y < folderar.__len__():\r\n        final = collection[0]\r\n        final = combineav(final, collection[y])\r\n        y = y + 1\r\n    return final\r\n\r\ndef ppcalcall(folderar, time):\r\n    x = 0\r\n    collection = []\r\n    final = []\r\n    while x < folderar.__len__():\r\n        collection.append(ppcalcoverall(folderar[x], time))\r\n        x = x + 1\r\n    y = 0\r\n    while y < folderar.__len__():\r\n        final = collection[0]\r\n        final = combineav(final, collection[y])\r\n        y = y + 1\r\n    return final\r\n\r\ndef prodcalcall(folderar, time):\r\n    x = 0\r\n    collection = []\r\n    final = []\r\n    while x < folderar.__len__():\r\n        collection.append(prodcalcoverall(folderar[x], time))\r\n        x = x + 1\r\n    y = 0\r\n    while y < folderar.__len__():\r\n        final = collection[0]\r\n        final = combineav(final, collection[y])\r\n        y = y + 1\r\n    return final\r\n\r\ndef dtcalcall(folderar, time):\r\n    x = 0\r\n    collection = []\r\n    final = []\r\n    while x < folderar.__len__():\r\n        collection.append(dtcalcoverall(folderar[x], time))\r\n        x = x + 1\r\n    y = 0\r\n    while y < folderar.__len__():\r\n        final = collection[0]\r\n        final = combineav(final, collection[y])\r\n        y = y + 1\r\n    return final\r\n\r\ndef escalcall(folderar, time):\r\n    x = 0\r\n    collection = []\r\n    final = []\r\n    while x < folderar.__len__():\r\n        collection.append(escalcoverall(folderar[x], time))\r\n        x = x + 1\r\n    y = 0\r\n    while y < folderar.__len__():\r\n        final = collection[0]\r\n        final = combineav(final, collection[y])\r\n        y = y + 1\r\n    return final\r\n\r\n# Graph\r\ndef ftfgraphar(folderar, timespan, color):\r\n    p = ppcalcall(folderar, timespan)\r\n    f = ftfcalcall(folderar, timespan)\r\n    ptt = ptall(folderar, timespan)\r\n    ftt = ftall(folderar, timespan)\r\n    temp = grabdays(lowestarr(folderar), timespan)\r\n    exp = []\r\n    exp2 = []\r\n    x = 0\r\n    labels = []\r\n    while x < temp.__len__():\r\n        labels.append(temp[x][temp[x].__len__() - 8:temp[x].__len__()])\r\n        exp.append(p[x] - average(p))\r\n        exp2.append(f[x] + average(f))\r\n        x = x + 1\r\n    i = 0\r\n    while i < exp.__len__():\r\n        if exp[i] < 0:\r\n            exp[i] = 0\r\n        i = i + 1\r\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\r\n    fig.add_trace(go.Scatter(x=labels, y=ptt, text=ptt, line_color='rgb(0,200,0)', name=\"Expected Throughput\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=ftt, text=ftt, line_color='rgb(200,0,0)', name=\"Expected Failed\"),\r\n                  secondary_y=True)\r\n    fig.add_trace(go.Scatter(x=labels, y=p, text=p, line_color='rgb(0,100,0)', name=\"Actual Throughput\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=exp, text=p, line_color='rgba(0,0,0,0)', showlegend=False))\r\n    fig.add_trace(go.Scatter(x=labels, y=exp2, text=p, line_color='rgba(0,0,0,0)', showlegend=False), secondary_y=True)\r\n    fig.add_trace(go.Scatter(x=labels, y=f, text=f, line_color='rgb(100,0,0)', name=\"Actual Failed\"), secondary_y=True)\r\n    fig.update_layout(title=\"First Time Failures & Total Throughput\", title_font_color=color,\r\n                      paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', autosize=False, width=840,\r\n                      height=600)\r\n    fig.update_layout(legend=dict(font=dict(color=color)))\r\n    fig.update_xaxes(color=color)\r\n    fig.update_yaxes(color=color, title=\"Throughput\")\r\n    fig.update_yaxes(gridcolor='rgb(50,50,50)', title=\"Failed\", secondary_y=True)\r\n    fig.update_yaxes(rangemode='tozero', constraintoward='bottom')\r\n    fig.update_yaxes(rangemode='tozero', constraintoward='bottom', secondary_y=True)\r\n    fig.write_image(\"static/img/ppm.png\")\r\n    print(\"parts updated\")\r\n\r\ndef prodgraphar(folderar, timespan, color):\r\n    p = prodcalcall(folderar, timespan)\r\n    temp = grabdays(lowestarr(folderar), timespan)\r\n    x = 0\r\n    labels = []\r\n    hun = []\r\n    eighty = []\r\n    while x < temp.__len__():\r\n        labels.append(temp[x][temp[x].__len__() - 8:temp[x].__len__()])\r\n        hun.append(100)\r\n        eighty.append(85)\r\n        x = x + 1\r\n    fig = make_subplots()\r\n    fig.add_trace(go.Scatter(x=labels, y=p, text=p, line_color='rgb(0,0,150)', name=\"Productivity\", showlegend=False))\r\n    fig.add_trace(go.Scatter(x=labels, y=hun, line_color='rgb(0,150,0)', name=\"100% Productivity\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=eighty, line_color='rgb(150,0,0)', name=\"85% Productivity\"))\r\n    fig.update_layout(title=\"Productivity\", title_font_color=color, paper_bgcolor='rgba(0,0,0,0)',\r\n                      plot_bgcolor='rgba(0,0,0,0)', autosize=False, width=840,\r\n                      height=600)\r\n    fig.update_layout(legend=dict(font=dict(color=color)))\r\n    fig.update_xaxes(color=color)\r\n    fig.update_yaxes(color=color)\r\n    fig.write_image(\"static/img/pro.png\")\r\n    print(\"Productivity updated\")\r\n\r\ndef dtgraphar(folderar, timespan, color):\r\n    p = dtcalcall(folderar, timespan)\r\n    e = escalcall(folderar, timespan)\r\n    temp = grabdays(lowestarr(folderar), timespan)\r\n    x = 0\r\n    labels = []\r\n    while x < temp.__len__():\r\n        labels.append(temp[x][temp[x].__len__() - 8:temp[x].__len__()])\r\n        x = x + 1\r\n    fig = make_subplots()\r\n    fig.add_trace(go.Scatter(x=labels, y=p, text=p, line_color='rgb(0,0,150)', name=\"Downtime\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=e, text=e, line_color='rgb(150,75,50)', name=\"Escalation time\"))\r\n    fig.update_layout(title=\"Downtime\", title_font_color=color, paper_bgcolor='rgba(0,0,0,0)',\r\n                      plot_bgcolor='rgba(0,0,0,0)', autosize=False, width=840,\r\n                      height=600)\r\n    fig.update_layout(legend=dict(font=dict(color=color)))\r\n    fig.update_xaxes(color=color)\r\n    fig.update_yaxes(color=color)\r\n    fig.write_image(\"static/img/dt.png\")\r\n    print(\"Downtime updated\")\r\n\r\ndef collectivear(folderar, time, color):\r\n    ftfgraphar(folderar, time, color)\r\n    prodgraphar(folderar, time, color)\r\n    dtgraphar(folderar, time, color)\r\n\r\ndef ftfgraph(legacyfolder, timespan, color):\r\n    p = ppcalcoverall(legacyfolder, timespan)\r\n    f = ftfcalcoverall(legacyfolder, timespan)\r\n    ptt = pt(legacyfolder, timespan)\r\n    ftt = ft(legacyfolder, timespan)\r\n    temp = grabdays(legacyfolder, timespan)\r\n    exp = []\r\n    exp2 = []\r\n    x = 0\r\n    labels = []\r\n    while x < temp.__len__():\r\n        labels.append(temp[x][temp[x].__len__()-8:temp[x].__len__()])\r\n        exp.append(p[x]-average(p))\r\n        exp2.append(f[x] + average(f))\r\n        x = x + 1\r\n    i = 0\r\n    while i < exp.__len__():\r\n        if exp[i] < 0:\r\n            exp[i] = 0\r\n        i = i + 1\r\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\r\n    fig.add_trace(go.Scatter(x=labels, y=ptt, text=ptt, line_color='rgb(0,200,0)', name=\"Expected Throughput\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=ftt, text=ftt, line_color='rgb(200,0,0)', name=\"Expected Failed\"), secondary_y=True)\r\n    fig.add_trace(go.Scatter(x=labels, y=p, text=p, line_color='rgb(0,100,0)', name=\"Actual Throughput\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=exp, text=p, line_color='rgba(0,0,0,0)', showlegend=False))\r\n    fig.add_trace(go.Scatter(x=labels, y=exp2, text=p, line_color='rgba(0,0,0,0)', showlegend=False), secondary_y=True)\r\n    fig.add_trace(go.Scatter(x=labels, y=f, text=f, line_color='rgb(100,0,0)', name=\"Actual Failed\"), secondary_y=True)\r\n    fig.update_layout(title=\"First Time Failures & Total Throughput\", title_font_color=color, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', autosize=False, width=840,\r\n                      height=600)\r\n    fig.update_layout(legend=dict(font=dict(color=color)))\r\n    fig.update_xaxes(color=color)\r\n    fig.update_yaxes(color=color, title=\"Throughput\")\r\n    fig.update_yaxes(gridcolor='rgb(50,50,50)', title=\"Failed\", secondary_y=True)\r\n    fig.update_yaxes(rangemode='tozero', constraintoward='bottom')\r\n    fig.update_yaxes(rangemode='tozero', constraintoward='bottom', secondary_y=True)\r\n    fig.write_image(\"static/img/ppm.png\")\r\n    print(\"parts updated\")\r\n\r\ndef prodgraph(legacyfolder, timespan, color):\r\n    p = prodcalcoverall(legacyfolder, timespan)\r\n    temp = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    labels = []\r\n    hun = []\r\n    eighty = []\r\n    while x < temp.__len__():\r\n        labels.append(temp[x][temp[x].__len__()-8:temp[x].__len__()])\r\n        hun.append(100)\r\n        eighty.append(85)\r\n        x = x + 1\r\n    fig = make_subplots()\r\n    fig.add_trace(go.Scatter(x=labels, y=p, text=p, line_color='rgb(0,0,150)', name=\"Productivity\", showlegend=False))\r\n    fig.add_trace(go.Scatter(x=labels, y=hun, line_color='rgb(0,150,0)', name=\"100% Productivity\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=eighty, line_color='rgb(150,0,0)', name=\"85% Productivity\"))\r\n    fig.update_layout(title=\"Productivity\", title_font_color=color, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', autosize=False, width=840,\r\n                      height=600)\r\n    fig.update_layout(legend=dict(font=dict(color=color)))\r\n    fig.update_xaxes(color=color)\r\n    fig.update_yaxes(color=color)\r\n    fig.write_image(\"static/img/pro.png\")\r\n    print(\"Productivity updated\")\r\n\r\ndef dtgraph(legacyfolder, timespan, color):\r\n    p = dtcalcoverall(legacyfolder, timespan)\r\n    e = escalcoverall(legacyfolder, timespan)\r\n    temp = grabdays(legacyfolder, timespan)\r\n    x = 0\r\n    labels = []\r\n    while x < temp.__len__():\r\n        labels.append(temp[x][temp[x].__len__()-8:temp[x].__len__()])\r\n        x = x + 1\r\n    fig = make_subplots()\r\n    fig.add_trace(go.Scatter(x=labels, y=p, text=p, line_color='rgb(0,0,150)', name=\"Downtime\"))\r\n    fig.add_trace(go.Scatter(x=labels, y=e, text=e, line_color='rgb(150,75,50)', name=\"Escalation time\"))\r\n    fig.update_layout(title=\"Downtime\", title_font_color=color, paper_bgcolor='rgba(0,0,0,0)',\r\n                      plot_bgcolor='rgba(0,0,0,0)', autosize=False, width=840,\r\n                      height=600)\r\n    fig.update_layout(legend=dict(font=dict(color=color)))\r\n    fig.update_xaxes(color=color)\r\n    fig.update_yaxes(color=color)\r\n    fig.write_image(\"static/img/dt.png\")\r\n    print(\"Downtime updated\")\r\n\r\ndef collective(folder, time, color):\r\n    ftfgraph(folder, time, color)\r\n    prodgraph(folder, time, color)\r\n    dtgraph(folder, time, color)\r\n\r\ndef pdfit(legacyfolder, timespan):\r\n    collective(legacyfolder, timespan, \"black\")\r\n    pdf = FPDF()\r\n    pdf.add_page()\r\n    pdf.set_font(\"Arial\", size=15)\r\n    pdf.cell(200, 10, txt=\"Marquardt Inc.\",ln=1, align='C')\r\n    pdf.cell(200, 10, txt=\"Floor Report\", ln=1, align='C')\r\n    s=72\r\n    pdf.image(\"static/img/mar2.png\", 0, 0, 0,20)\r\n    pdf.image(\"static/img/ppm.png\", 108, 30, 0, s)\r\n    pdf.image(\"static/img/pro.png\", 10, 100, 0, s)\r\n    pdf.image(\"static/img/dt.png\", 108, 100, 0, s)\r\n    pdf.set_font(\"Arial\", size=10)\r\n    pdf.cell(200, 10, txt=\"\",ln=1, align='l')\r\n    pdf.set_text_color(0, 0, 0)\r\n    pdf.cell(200, 10, txt=\"Average FTF: \"+str(round(average(ftfcalcoverall(legacyfolder, timespan)), 2))+\" ppm\", ln=1, align='l')\r\n    pdf.cell(200, 10, txt=\"Average TTP: \"+str(round(average(ppcalcoverall(legacyfolder, timespan)), 2))+\" ppm\", ln=1, align='l')\r\n    pdf.cell(200, 10, txt=\"Productivity: \" + str(round(average(prodcalcoverall(legacyfolder, timespan)), 2)) + \"%\", ln=1, align='l')\r\n    pdf.cell(200, 10, txt=\"Downtime Percentage: \" + str(round(average(dtcalcoverall(legacyfolder, timespan))/ 6)) + \"%\", ln=1,align='l')\r\n    pdf.cell(200, 10, txt=\"Downtime in minutes: \" + str(round(average(dtcalcoverall(legacyfolder, timespan)))) + \" min\", ln=1,align='l')\r\n    pdf.output(\"static/report.pdf\")\r\n    print(\"Report created\")\r\n\r\ndef pdfita(folderar, timespan):\r\n    collectivear(folderar, timespan, \"black\")\r\n    pdf = FPDF()\r\n    pdf.add_page()\r\n    pdf.set_font(\"Arial\", size=15)\r\n    pdf.cell(200, 10, txt=\"Marquardt Inc.\",ln=1, align='C')\r\n    pdf.cell(200, 10, txt=\"Floor Report\", ln=1, align='C')\r\n    s=72\r\n    pdf.image(\"static/img/mar2.png\", 0, 0, 0,20)\r\n    pdf.image(\"static/img/ppm.png\", 108, 30, 0, s)\r\n    pdf.image(\"static/img/pro.png\", 10, 100, 0, s)\r\n    pdf.image(\"static/img/dt.png\", 108, 100, 0, s)\r\n    pdf.set_font(\"Arial\", size=10)\r\n    pdf.cell(200, 10, txt=\"\",ln=1, align='l')\r\n    pdf.set_text_color(0, 0, 0)\r\n    pdf.cell(200, 10, txt=\"Average FTF: \"+str(round(average(ftfcalcall(folderar, timespan)), 2))+\" ppm\", ln=1, align='l')\r\n    pdf.cell(200, 10, txt=\"Average TTP: \"+str(round(average(ppcalcall(folderar, timespan)), 2))+\" ppm\", ln=1, align='l')\r\n    pdf.cell(200, 10, txt=\"Productivity: \" + str(round(average(prodcalcall(folderar, timespan)), 2)) + \"%\", ln=1, align='l')\r\n    pdf.cell(200, 10, txt=\"Downtime Percentage: \" + str(round(average(dtcalcall(folderar, timespan))/ 6)) + \"%\", ln=1,align='l')\r\n    pdf.cell(200, 10, txt=\"Downtime in minutes: \" + str(round(average(dtcalcall(folderar, timespan)))) + \" min\", ln=1,align='l')\r\n    pdf.output(\"static/report.pdf\")\r\n    print(\"Report created\")\r\n\r\nif __name__ == '__main__':\r\n    data = \"databaseCsv\"\r\n    data2 = \"databaseCsv2\"\r\n    ldata = \"legacyDatabases\"\r\n    ldata2 = \"legacyDatabases2\"\r\n    time = 100000\r\n    collective(ldata, time, \"white\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/art/backend/main.py b/art/backend/main.py
--- a/art/backend/main.py	(revision da8209895a2b1c9bbbddaba4961db74b793f21d4)
+++ b/art/backend/main.py	(date 1670357362891)
@@ -357,7 +357,7 @@
     x = 0
     final = []
     while x < fol.__len__():
-        final.append(add(prodcalc(fol[x])))
+        final.append(average(prodcalc(fol[x])))
         x = x + 1
     return final
 
@@ -687,4 +687,5 @@
     ldata = "legacyDatabases"
     ldata2 = "legacyDatabases2"
     time = 100000
-    collective(ldata, time, "white")
\ No newline at end of file
+    #collective(ldata, time, "white")
+    print(prodcalc("legacyDatabases/databaseCsv_2022-11-29"))
\ No newline at end of file
